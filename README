= ruby-prof

== Overview

ruby-prof is a fast code profiler for Ruby.  Its features include:

* Speed - it is a C extension and therefore many times faster than the standard Ruby profiler.
* Flat Profiles - similar to the reports generated by the standard Ruby profiler
* Graph profiles - similar to GProf, these show how long a method runs, which methods call it and which methods it calls.
* Threads - supports profiling multiple threads simultaneously
* Recursive calls - supports profiling recursive method calls
* Reports - can generate both text and cross-referenced html reports
* Output - can output to standard out or to a file


== Requirements

ruby-prof requires Ruby 1.8.2 or higher.

If you are running Linux or Unix you'll need a C compiler so the extension
can be compiled when it is insalled.

If you are running Windows, then install the Windows specific RubyGem which
includes an already built extension.


== Install

ruby-prof is provided as a RubyGem.  To install:

<tt>gem install ruby-prof</tt>


== Usage

There are two ways of running ruby-prof.

=== ruby-prof executable
The first is to use ruby-prof to run the Ruby program
you want to profile.  For more information refer to
the ruby-prof documentation[link:files/bin/ruby-prof.html].

=== ruby-prof API
The second way is to use the ruby-prof API to profile
particular segements of code.  

  require 'ruby-prof'
  
  # Profile the code
  RubyProf.start
  ...
  [code to profile]
  ...
  result = RubyProf.end
  
  # Print a flat profile to text
  printer = RubyProf::TextPrinter.new(result)
  printer.print(STDOUT, 0)
	
Alternatively, you can use a block to tell ruby-prof what
to profile:

  require 'ruby-prof'
  
  # Profile the code
  result = RubyProf.profile do
    ...
    [code to profile]
    ...
  end
  
  # Print a graph profile to text
  printer = RubyProf::GraphPrinter.new(result)
  printer.print(STDOUT, 0)


== Reports
ruby-prof can generate flat profile and graph profile reports.

Flat profiles show the overall time spent in each method.  They
are a good of quickly identifying which methods take the most time.
An example of a flat profile and an explanation can be found in
{examples/flat.txt}[link:files/examples/flat_txt.html].

Graph profiles also show the overall time spent in each method.
In addition, they also show which methods call the current
method and which methods its calls.  Thus they are good for
understanding how methods gets called and provide insight into
the flow of your program.  Graph profiles can be generated
in text and html.  Since the html is cross-referenced it is
easier to work with.  An example text graph profile
is located at {examples/graph.txt}[link:files/examples/graph_txt.html] while
an example html graph file is located at 
{examples/graph.html}[link:files/examples/graph_html.html].

Reports are created by printers.  The current printers include:
* RubyProf::FlatPrinter - Creates a flat report in text format
* RubyProf::GraphPrinter - Creates a call graph report in text format
* RubyProf::GraphHtmlPrinter - Creates a call graph report in HTML (separate files per thread)

To use a printer:

  result = RubyProf.end
  printer = RubyProf::GraphPrinter.new(result)
  printer.print(STDOUT, 0)

The first parameter is any writable IO object such as STDOUT or a file.
The second parameter, which has a default value of 0, specifies 
the minimum percentage a method must take to be printed.  For more
information please see the documentation for the different printers.


== Timings

The timings are based on wall clock time as opposed to process time, 
so if there is anything else running on your computer it will lengthen
the reported times.  

ruby-prof can measure times using three different methods:
*clock - Use clock(3). This is default.
*gettimeofday - Use gettimeofday(2).
*cpu - Use the CPU clock counter.  This mode is only supported on Pentium or PowerPC platforms.

You can specify the method to use as a command line parameter to ruby-prof or in the
RUBY_PROF_CLOCK_MODE environment variable
    
	export RUBY_PROF_CLOCK_MODE=gettimeofday
  

== Recursive Calls

Recursive calls occur when method A calls method A and cycles
occur when method A calls method B calls method C calls method A.
ruby-prof can detect recursive calls any cycle calls, but does not
currently report these in its output.

However, the self time values for recursive calls should always 
be accurate.  It is also believed that the total times are
accurate, but these should be carefully analyzed to verify their veracity.


== License
See LICENSE for license information.

